import warnings
import urllib3
import gradio as gr
import numpy as np
from PIL import Image
import albumentations as A
from pathlib import Path
from typing import Optional, Tuple
import json
import typer
from loguru import logger

# –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

from fine_tune.config import Config, MODELS_DIR
from fine_tune.modeling.onnx_export import ONNXInference


class ImageClassifierApp:
    """Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, config: Config, model_path: Optional[Path] = None):
        self.config = config
        self.model = None
        self.onnx_inference = None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.transform = A.Compose([
            A.Resize(config.data.image_size[0], config.data.image_size[1]),
            A.Normalize(mean=config.augmentation.mean, std=config.augmentation.std)
        ])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        if model_path:
            self.load_model(model_path)
        else:
            # –ò—â–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            self.find_and_load_best_model()
    
    def find_and_load_best_model(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å"""
        # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
        summary_path = MODELS_DIR / "training_summary.json"
        
        if summary_path.exists():
            with open(summary_path, 'r', encoding='utf-8') as f:
                summary = json.load(f)
            
            best_model_name = summary.get('best_model')
            if best_model_name:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å ONNX –º–æ–¥–µ–ª—å
                onnx_path = MODELS_DIR / f"{best_model_name}_best.onnx"
                if onnx_path.exists():
                    self.load_onnx_model(onnx_path)
                    return
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
    
    def load_model(self, model_path: Path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        if model_path.suffix == '.onnx':
            self.load_onnx_model(model_path)

    def load_onnx_model(self, onnx_path: Path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ONNX –º–æ–¥–µ–ª—å"""
        try:
            self.onnx_inference = ONNXInference(onnx_path)
            logger.info(f"ONNX –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {onnx_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ONNX –º–æ–¥–µ–ª–∏: {e}")
            raise

    
    def preprocess_image(self, image: Image.Image) -> np.ndarray:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        image_array = np.array(image.convert('RGB'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        transformed = self.transform(image=image_array)
        processed_image = transformed['image']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CHW
        processed_image = processed_image.transpose(2, 0, 1)
        
        return processed_image
    
    def predict(self, image: Image.Image) -> Tuple[str, dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        if image is None:
            return "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", {}
        
        try:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = self.preprocess_image(image)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ONNX –º–æ–¥–µ–ª—å
            probabilities = self.onnx_inference.predict_proba(processed_image)
            predicted_class_idx = self.onnx_inference.predict_class(processed_image)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
            predicted_class = self.config.data.class_names[predicted_class_idx]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ (–¥–ª—è gr.Label)
            class_probabilities = {}
            for i, class_name in enumerate(self.config.data.class_names):
                class_probabilities[class_name] = float(probabilities[0][i])
            
            return predicted_class, class_probabilities
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}", {}
    
    def create_interface(self) -> gr.Blocks:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio"""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        examples = []
        for class_name in self.config.data.class_names:
            class_dir = self.config.data.dataset_path / class_name
            if class_dir.exists():
                for img_path in list(class_dir.glob("*.jpg"))[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    examples.append([str(img_path)])
        
        with gr.Blocks(
            title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            theme=gr.themes.Soft(),
            css="""
            .gradio-container {
                max-width: 800px !important;
                margin: auto !important;
            }
            """
        ) as interface:
            
            gr.Markdown(
                """
                # üñºÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –æ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.
                
                **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:**
                """ + ", ".join([f"`{name}`" for name in self.config.data.class_names])
            )
            
            with gr.Row():
                with gr.Column(scale=1):
                    # –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    input_image = gr.Image(
                        type="pil",
                        label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        height=300
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    predict_btn = gr.Button(
                        "üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
                        variant="primary",
                        size="lg"
                    )
                    
                    # –ü—Ä–∏–º–µ—Ä—ã
                    if examples:
                        gr.Examples(
                            examples=examples,
                            inputs=input_image,
                            label="–ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                        )
                
                with gr.Column(scale=1):
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    prediction_output = gr.Textbox(
                        label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å",
                        interactive=False,
                        value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    )
                    
                    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
                    probabilities_output = gr.Label(
                        label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤",
                        num_top_classes=len(self.config.data.class_names)
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            predict_btn.click(
                fn=self.predict,
                inputs=input_image,
                outputs=[prediction_output, probabilities_output]
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            input_image.change(
                fn=self.predict,
                inputs=input_image,
                outputs=[prediction_output, probabilities_output]
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            with gr.Accordion("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", open=False):
                gr.Markdown(f"""
                **–¢–∏–ø –º–æ–¥–µ–ª–∏:** ONNX  
                **–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:** {self.onnx_inference.model_path}  
                **–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞:** {self.onnx_inference.input_shape}  
                **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤:** {len(self.config.data.class_names)}
                """)
        return interface
    
    def launch(
        self, 
        share: bool = False, 
        server_name: str = "127.0.0.1", 
        server_port: int = 7860,
        **kwargs
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        interface = self.create_interface()
        
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ {server_name}:{server_port}")
        
        interface.launch(
            share=share,
            server_name=server_name,
            server_port=server_port,
            **kwargs
        )


def create_app_from_config(
    config_path: Optional[Path] = None,
    model_path: Optional[Path] = None
) -> ImageClassifierApp:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config_path and config_path.exists():
        import yaml
        with open(config_path, 'r', encoding='utf-8') as f:
            config_dict = yaml.safe_load(f)
        config = Config(**config_dict)
    else:
        config = Config()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ImageClassifierApp(config, model_path)
    
    return app


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
app_cli = typer.Typer()


@app_cli.command()
def launch_app(
    config_path: Optional[Path] = None,
    model_path: Optional[Path] = None,
    share: bool = False,
    port: int = 7860,
    host: str = "127.0.0.1"
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app_from_config(config_path, model_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        app.launch(
            share=share,
            server_name=host,
            server_port=port
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    app_cli()
